<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--parameterType:写在mapper文件中的一个属性。表示dao接口中方法的参数的数据类型
   parameterType它的值是java的数据类型全限定名称或者是mybatis定义的别名

  注意:parameterType不是强制的,mybatis可以通过通过反射机构能够发现接口参数的数类型。所以可以没有 一般我们不写
  使用#{}之后,mybatis执行sql是使用的jdbc中的PreparedStatement对象
  由mybatis下面的代码:
   1、mybatis创建Connection，PreparedStatement对象
   String sql =  select id,name,email,age from  Student where id=?
   PreparedStatement pst = conn.preparedStatement(sql);
   pst.setInt(1,1001);


   2、执行sql封装为resultType= "com.company.domain.Student"这个对象
   ResultSet  rs = ps.executeQuery();
   Studnet student = null;
   while(rs.next){
    //从数据库取表的一行数据,存到一个java对象属性中
    Student  student =new Student();
    student.setId(rs.getInt("id"));
    student.setName(rs.getString("name"));
    student.setEmail(rs.getString("email"));
    student.setAge(rs.getInt("age"));
   }

   return student; //给dao方法调用的返回值
  -->
<mapper namespace="com.company.dao.StudentDao">
   <select id="selectStudentById" resultType="com.company.domain.Student" parameterType="java.lang.Integer">
         select id,name,email,age from  student where id=#{id}
   </select>


    <!--命名参数 多个参数,使用@Param参数名-->
    <select id="selectNameOrAgeParams" resultType="com.company.domain.Student">
        select id,name,email,age from  student where name=#{myName} or age=#{myAge};
    </select>


    <!--
      对象传参,使用java对象的数学值,作为参数实际值
      使用对象语法:#{属性名,javaType=类型名称,jdbcType=数据类型
      javaType：指 java实体类的属性类型
      jdbcType:指这个java实体类的字段对应数据库这个字段的数据库类型,很少用

      我们使用简化方式:#{属性名},javaType,jdbcType的值mybatis反射能获取。不用提供
    -->
<!--    <select id="selectParamNameOrParamAge" resultType="com.company.domain.Student">-->
<!--        select id,name,email,age from  Student-->
<!--        where name=#{paramName,javaType=java.lang.String,jdbcType=VARCHAR} or-->
<!--        age=#{paramAge,javaType=java.lang.Integer,jdbcType=INTEGER}-->
<!--    </select>-->

    <select id="selectParamNameOrParamAge" resultType="com.company.domain.Student">
        select id,name,email,age from  student  where name=#{paramName} or age=#{paramAge}
    </select>

    <!--多个参数使用位置-->
    <select id="selectPosition" resultType="com.company.domain.Student">
        select id,name,email,age from  student  where name=#{arg0} or age=#{arg1}
    </select>


    <!--多个参数,使用map,使用语法 #{map的key}-->
    <select id="selectMap" resultType="com.company.domain.Student">
        select id,name,email,age from  student where name=#{myName} or age=#{myAge};
    </select>


    <!--resultType结果类型,指sql语句执行完毕后,数据转为java对象-->
    <select id="selectViewStudentVO" resultType="com.company.vo.ViewStudentVO">
        select id,name,email,age from  Student where id=#{sid};
    </select>


    <!--resultType结果类型，也可以是java的类型,或者java类的全限定名称
         <select id="selectCount" resultType="int"></select>
    -->
    <select id="selectCount" resultType="java.lang.Integer">
        select count(1) from student;
    </select>

    <!--定义方法返回map
      1)列名是map的key,列值是map的value
      2)只能最多返回一行
      resultMap:结果映射, 指定列名和java对象的属性对应关系
      1）你自定义列值赋值给哪个属性
      2）当你的列名属性名不一样时,一定使用resultMap

    -->
    <select id="selectMapById" resultType="java.util.HashMap">
        select id,name,email,age from  student where id=#{stuid}
    </select>


    <!--
      使用resultMap
      （1）先定义resultMap
       (2) 在select标签,使用resultMap来定义

     定义resultMap
       id:自定义名称,表示你定义的resultMap
       type: java类型的全限定名称
       列名和java属性的关系
       column:列名
       property:java类型的属性名
    -->
    <resultMap id="StudentMap" type="com.company.domain.Student">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="email" property="email"/>
        <result column="age" property="age"/>
    </resultMap>

    <select id="selectAllStudent" resultMap="StudentMap">
        select id,name,email,age from  student
    </select>


    <resultMap id="myStudent" type="com.company.domain.MyStudent">
        <id column="id" property="stuid"/>
        <id column="name" property="stuname"/>
        <id column="email" property="stuemail"/>
        <id column="age" property="stuage"/>
    </resultMap>

    <!--第一种:解决列名和属性名不同的问题-->
    <select id="selectMyStudent" resultMap="myStudent">
        select id,name,email,age from  student
    </select>

    <!--解决列名和属性名不一样的问题二:
      resultType默认原则是:  同名的列值赋值给同名的属性使用列别名(java对象属性名)
      推荐这种
    -->
    <select id="selectMyStudentOfResultType" resultType="com.company.domain.MyStudent">
        select id as stuid,name as stuname,email as stuemail,age as stuage from  Student
    </select>

    <!--第一种like，java代码指定 like的内容-->
    <select id="selectLikeOne" resultType="com.company.domain.Student">
        select id,name,email,age from  student where  name like #{name}
    </select>


    <!--第二种方式: 在mapper文件中拼接like内容-->
    <select id="selectLikeTwo" resultType="com.company.domain.Student">
        select id,name,email,age from  student where  name like "%" #{name}  "%"
    </select>


</mapper>